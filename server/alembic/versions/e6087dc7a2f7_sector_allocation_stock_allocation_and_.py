"""sector allocation, stock allocation, and market cap allocation tables design

Revision ID: e6087dc7a2f7
Revises: 031ad1300524
Create Date: 2025-03-16 17:24:09.133853

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'e6087dc7a2f7'
down_revision: Union[str, None] = '031ad1300524'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # ✅ Step 1: Drop foreign key constraints safely (Check if they exist)
    op.execute("""
        DO $$ 
        BEGIN 
            IF EXISTS (SELECT 1 FROM information_schema.table_constraints 
                       WHERE constraint_name = 'fund_stock_allocation_stock_id_fkey') 
            THEN ALTER TABLE fund_stock_allocation DROP CONSTRAINT fund_stock_allocation_stock_id_fkey; 
            END IF; 
        END $$;
    """)

    op.execute("""
        DO $$ 
        BEGIN 
            IF EXISTS (SELECT 1 FROM information_schema.table_constraints 
                       WHERE constraint_name = 'fund_stock_allocation_mutual_fund_id_fkey') 
            THEN ALTER TABLE fund_stock_allocation DROP CONSTRAINT fund_stock_allocation_mutual_fund_id_fkey; 
            END IF; 
        END $$;
    """)

    op.execute("""
        DO $$ 
        BEGIN 
            IF EXISTS (SELECT 1 FROM information_schema.table_constraints 
                       WHERE constraint_name = 'fund_allocations_mutual_fund_id_fkey') 
            THEN ALTER TABLE fund_allocations DROP CONSTRAINT fund_allocations_mutual_fund_id_fkey; 
            END IF; 
        END $$;
    """)

    op.execute("""
        DO $$ 
        BEGIN 
            IF EXISTS (SELECT 1 FROM information_schema.table_constraints 
                       WHERE constraint_name = 'fund_allocations_sector_id_fkey') 
            THEN ALTER TABLE fund_allocations DROP CONSTRAINT fund_allocations_sector_id_fkey; 
            END IF; 
        END $$;
    """)

    op.execute("""
        DO $$ 
        BEGIN 
            IF EXISTS (SELECT 1 FROM information_schema.table_constraints 
                       WHERE constraint_name = 'fund_overlap_fund_1_id_fkey') 
            THEN ALTER TABLE fund_overlap DROP CONSTRAINT fund_overlap_fund_1_id_fkey; 
            END IF; 
        END $$;
    """)

    op.execute("""
        DO $$ 
        BEGIN 
            IF EXISTS (SELECT 1 FROM information_schema.table_constraints 
                       WHERE constraint_name = 'fund_overlap_fund_2_id_fkey') 
            THEN ALTER TABLE fund_overlap DROP CONSTRAINT fund_overlap_fund_2_id_fkey; 
            END IF; 
        END $$;
    """)

    # ✅ Step 2: Drop dependent tables first (Only if they exist)
    op.execute("DROP TABLE IF EXISTS fund_stock_allocation CASCADE")
    op.execute("DROP TABLE IF EXISTS fund_allocations CASCADE")
    op.execute("DROP TABLE IF EXISTS fund_overlap CASCADE")

    # ✅ Step 3: Drop parent tables (Only if they exist)
    op.execute("DROP TABLE IF EXISTS stocks CASCADE")
    op.execute("DROP TABLE IF EXISTS sectors CASCADE")

    # ✅ Step 4: Drop indexes (Only if they exist)
    op.execute("DROP INDEX IF EXISTS ix_stocks_id")
    op.execute("DROP INDEX IF EXISTS ix_fund_allocations_id")
    op.execute("DROP INDEX IF EXISTS ix_fund_stock_allocation_id")
    op.execute("DROP INDEX IF EXISTS ix_sectors_id")
    op.execute("DROP INDEX IF EXISTS ix_fund_overlap_id")

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('fund_overlap',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('fund_1_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('fund_2_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('overlap_percentage', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['fund_1_id'], ['mutual_funds.id'], name='fund_overlap_fund_1_id_fkey'),
    sa.ForeignKeyConstraint(['fund_2_id'], ['mutual_funds.id'], name='fund_overlap_fund_2_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='fund_overlap_pkey')
    )
    op.create_index('ix_fund_overlap_id', 'fund_overlap', ['id'], unique=False)
    op.create_table('sectors',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('sectors_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='sectors_pkey'),
    sa.UniqueConstraint('name', name='sectors_name_key'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_sectors_id', 'sectors', ['id'], unique=False)
    op.create_table('fund_stock_allocation',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('mutual_fund_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('stock_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('allocation_percentage', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['mutual_fund_id'], ['mutual_funds.id'], name='fund_stock_allocation_mutual_fund_id_fkey'),
    sa.ForeignKeyConstraint(['stock_id'], ['stocks.id'], name='fund_stock_allocation_stock_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='fund_stock_allocation_pkey')
    )
    op.create_index('ix_fund_stock_allocation_id', 'fund_stock_allocation', ['id'], unique=False)
    op.create_table('fund_allocations',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('mutual_fund_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('sector_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('allocation_percentage', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['mutual_fund_id'], ['mutual_funds.id'], name='fund_allocations_mutual_fund_id_fkey'),
    sa.ForeignKeyConstraint(['sector_id'], ['sectors.id'], name='fund_allocations_sector_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='fund_allocations_pkey')
    )
    op.create_index('ix_fund_allocations_id', 'fund_allocations', ['id'], unique=False)
    op.create_table('stocks',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='stocks_pkey'),
    sa.UniqueConstraint('name', name='stocks_name_key')
    )
    op.create_index('ix_stocks_id', 'stocks', ['id'], unique=False)
    # ### end Alembic commands ###
